```mermaid
sequenceDiagram
participant U as User<br>(리소스 소유자)
participant C as Next.js<br>(클라이언트 애플리케이션)
participant AS as Spring Authorization Server<br>(인가 서버 : 토큰 엔드포인트)
participant RS as Spring Boot Resource Server<br>(리소스 서버)

    %% 1.보호 리소스 접근 요청 시작
    U->>C: "리소스 소유자는 브라우저를 통해<br>클라이언트 앱에서 특정 기능 버튼을 실행,<br>(ex. 내 정보 보기)"

    %% 2.현재 사용자가 로그인 되어 있지 않을 경우, 클라이언트는 사용자 에이전트(브라우저)를 인가 서버의 로그인 페이지 엔드포인트로 리다이렉트시킴 (ex. Location 헤더 활용)
    C->>U: "사용자 에이전트(브라우저)는<br>인가서버로 로그인을 수행하기 위한<br>엔드포인트를 요청"

    %% 3.
    U->>AS: "인가 서버는 사용자 에이전트(브라우저)에게 로그인 페이지를 응답하게 되고,<br>사용자 에이전트(브라우저)는 사용자에게<br>인가 서버를 통해 인증을 수행할 수 있는 페이지를 렌더링해서 보여주게 됨"

    %% 4.
    AS->>U: "사용자는 id/pw를 입력하여 인증을 수행"

    %% 5. 인가 서버는 사용자 에이전트를 클라이언트 애플리케이션으로 리다이렉트시키면서 인가 코드(code)를 URL 쿼리 파라미터로 전달
    U->>AS: "인증이 성공할 경우,<br>추가적으로 클라이언트 애플리케이션을 인가하기 위한 프로세스가 시작됨<br>(Authorization Code grant 방식)"

    %% 6. 여기서 code는 클라이언트 애플리케이션이 인가 서버에게 액세스 토큰을 발급받기 위한 절차에서 활용되는 임시 값으로, 인가 서버가 클라이언트 애플리케이션을 확인하는 데 사용됨
    AS->>U: "사용자 에이전트는 인가 코드의 값을 활용하여<br>사용자에게 클라이언트 앱의 리다이렉트 URL에<br>해당하는 페이지를 보여줌<br>(callback URL)"

    %% 6-2.
    U->>C: ""

    %% 7.
    C->>RS: "클라이언트 애플리케이션은<br>인가 코드와 클라이언트 앱 자신의<br>자격 증명 정보(Client ID, Client Secret)를 가져다가<br>액세스 토큰을 발급해주는 인가 서버의 토큰 엔드 포인트에 요청 전송<br>ex.'token_endpoint': 'http://localhost:8080/realms/my-first-demo/protocol/openid-connect/token',<br>?code=abweuifhiqusadwe&client_id=demo-frontend& ..."

    %% 8.
    RS->>C: "인가 코드와 클라이언트 자격증명 정보가 클라이언트 앱 정보와 일치할 경우,<br>인가 서버는 액세스 토큰을 클라이언트에게 응답"

    %% 9.
    C->>RS: "클라이언트는 사용자가 요청한 특정 기능<br>(내 정보 보기, 주문 목록 조회 등)을 <br>수행하기 위해 필요한 리소스(데이터)에 접근,<br>사용하기 위해 액세스 토큰을 보호된 리소스 서버(Spring)에 전달"

    %% 10.
    RS->>AS: "리소스 서버는 클라이언트에게 받은 액세스 토큰이<br>Keycloak 인가 서버가 제공한 토큰인지 확인"

    %% 10-2.
    AS->>RS: ""

    %% 11.
    RS->>C: "토큰이 유효할 경우, 리소스 서버는 토큰에서 적절한 권한 여부까지 확인 후<br>클라이언트에게 요청받은 리소스를 응답"

```
